#!/opt/homebrew/bin/python3


import aiohttp
import argparse
import asyncio
import yaml
from bs4 import BeautifulSoup
from tabulate import tabulate


pub_base_url = "https://pub.dev/packages/{}"


def update_file(path: str, new_packages):
    rows = {p[0]: f"{p[0]}: {p[2]}" for p in new_packages}

    file = open(path, "r")
    lines = file.readlines()
    begin = False
    new_lines = []
    for line in lines:
        if not begin or len(rows) == 0:
            begin = "dependencies" in line
        else:
            for k in rows:
                if k in line:
                    line = f"  {rows[k]}\n"
                    rows.pop(k)
                    break

        new_lines.append(line)
    file.close()

    file = open(path, "w")
    file.writelines(new_lines)
    file.close()

    print("pubspec.yaml correctly updated!")


async def update(package: str, current_version: str, session: aiohttp.ClientSession):
    url = pub_base_url.format(package)

    response = await session.get(url)
    if not response.ok:
        print(f"Request failed for URL {url}")
    else:
        html = await response.text()
        soup = BeautifulSoup(html, 'html.parser')

        newest_version = soup.select_one(".pkg-page-title-copy-icon")["data-copy-content"].split(" ")[1]

        if newest_version != current_version:
            return package, current_version, newest_version


async def process(path: str):
    parsed_file = process_yaml(path)
    dependencies = parsed_file["dependencies"]

    async with aiohttp.ClientSession() as session:
        tasks = []

        for dep in dependencies:
            if dep in ["flutter", "flutter_localizations"]:
                continue
            else:
                version = parsed_file["dependencies"][dep]

                if type(version) != str: # Packages which have git or path have to be ignored
                    continue
                else:
                    tasks.append(update(package=dep, current_version=version, session=session))

        responses = await asyncio.gather(*tasks, return_exceptions=True)

        rows = [res for res in responses if res is not None]

        if len(rows) == 0:
            print("No package has to be updated!")
        else:
            print(tabulate(rows, headers=["Package", "Current version", "New version"]))
            print()
            do_update = input("Do you want me to update the pubspec.yaml for you? [y/N]: ")

            if do_update.lower() == "y":
                return rows
    pass


def process_yaml(path: str):
    file = open(path, "r")
    parsed_file = yaml.load(file, Loader=yaml.FullLoader)
    file.close()
    return parsed_file


async def main():
    parser = argparse.ArgumentParser(description="Update all the packages in pubspec.yaml of a Flutter project.")
    parser.add_argument("path", metavar="project/file path", type=str, help="The path of the Flutter project or pubspec.yaml file")

    args = parser.parse_args()
    file_path = args.path

    file_name = file_path.split("/")[-1]
    if file_name != "pubspec.yaml":
        if file_name == "":
            file_path += "pubspec.yaml"
        else:
            file_path += "/pubspec.yaml"

    try:
        new_packages = await process(file_path)
        if new_packages is not None:
            update_file(file_path, new_packages)
    except KeyboardInterrupt:
        pass
    except FileNotFoundError:
        print("pubspec.yaml not found! Check the path.")


if __name__ == "__main__":
    asyncio.run(main())